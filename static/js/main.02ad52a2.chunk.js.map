{"version":3,"sources":["SpinButton.js","Spinner.js","SpinnerMachine.js","Heading.js","App.js","index.js"],"names":["SpinButton","props","react_default","a","createElement","id","className","onClick","clickHandler","Spinner","React","Component","constructor","super","this","state","topMargin","timeRemaining","spin","bind","move","tick","initialize","setTimeout","timer","setInterval","setState","elements","length","targetEl","Math","floor","random","clearInterval","render","style","marginTop","map","el","key","mechanism","denomination","threshold","SpinnerMachine","handleClick","event","preventDefault","mSpinner","current","dSpinner","tSpinner","createRef","Fragment","src_Spinner","ref","src_SpinButton","Heading","class","App","src_Heading","src_SpinnerMachine","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"yIAkBeA,MAZf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,UACEC,GAAG,cACHC,UAAU,eACVC,QAASN,EAAMO,cAHjB,oBCoFWC,MAtFf,cAAsBC,IAAMC,UAC1BC,YAAYX,GACVY,MAAMZ,GACNa,KAAKC,MAAQ,CACXC,UAAW,EACXC,cAAe,GAEjBH,KAAKI,KAAOJ,KAAKI,KAAKC,KAAKL,MAC3BA,KAAKM,KAAON,KAAKM,KAAKD,KAAKL,MAC3BA,KAAKO,KAAOP,KAAKO,KAAKF,KAAKL,MAC3BA,KAAKQ,WAAaR,KAAKQ,WAAWH,KAAKL,MAOzCI,OACEJ,KAAKQ,aAGLC,WAAW,KACTT,KAAKU,MAAQC,YAAY,IAAMX,KAAKO,OAAQ,MAC3C,KAKLC,aAEER,KAAKY,SAAS,CAAEV,UAA+C,MAAlCF,KAAKb,MAAM0B,SAASC,OAAS,KAG1DL,WAAW,KACTT,KAAKY,SAAS,CAAEV,UAAW,KAC1B,KAGHF,KAAKe,SAAWC,KAAKC,MAAMD,KAAKE,SAAWlB,KAAKb,MAAM0B,SAASC,QAC/DK,cAAcnB,KAAKU,OAInBV,KAAKY,SAAS,CAAET,cAA+B,IAAhBH,KAAKe,WAKtCR,OACMP,KAAKC,MAAME,eAAiB,EAC9BgB,cAAcnB,KAAKU,OAGrBV,KAAKM,OAIPA,OACEN,KAAKY,SAAUX,IACN,CACLC,UAAWD,EAAMC,UAAY,IAC7BC,cAAeF,EAAME,cAAgB,OAK3CiB,SAAS,IACDlB,EAAcF,KAAKC,MAAnBC,UAEN,OACEd,EAAAC,EAAAC,cAAA,QACEE,UAAU,oBACV6B,MAAO,CACLC,UAAWpB,EAAY,OAGxBF,KAAKb,MAAM0B,SAASU,IAAKC,GACxBpC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBAAkBiC,IAAKD,GACnCA,kBC7Eb,IAAIE,EAAY,CACd,SACA,UACA,eACA,WACA,kBAEEC,EAAe,CAAC,QAAS,SAAU,WAAY,UAAW,UAC1DC,EAAY,CAAC,QAAS,SAAU,QAAS,WAmC9BC,MA/Bf,cAA6BjC,IAAMC,UACjCC,YAAYX,GACVY,MAAMZ,GADWa,KASnB8B,YAAeC,KACbA,EAAMC,iBACNhC,KAAKiC,SAASC,QAAQ9B,OACtBJ,KAAKmC,SAASD,QAAQ9B,OACtBJ,KAAKoC,SAASF,QAAQ9B,SAXtBJ,KAAK8B,YAAc9B,KAAK8B,YAAYzB,KAAKL,MACzCA,KAAKiC,SAAWrC,IAAMyC,YACtBrC,KAAKmC,SAAWvC,IAAMyC,YACtBrC,KAAKoC,SAAWxC,IAAMyC,YAWxBjB,SACE,OACEhC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiD,SAAA,KACElD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAACiD,EAAD,CAAS1B,SAAUa,EAAWc,IAAKxC,KAAKiC,WACxC7C,EAAAC,EAAAC,cAACiD,EAAD,CAAS1B,SAAUc,EAAca,IAAKxC,KAAKmC,WAC3C/C,EAAAC,EAAAC,cAACiD,EAAD,CAAS1B,SAAUe,EAAWY,IAAKxC,KAAKoC,YAE1ChD,EAAAC,EAAAC,cAACmD,EAAD,CAAY/C,aAAcM,KAAK8B,aAA/B,sBCxBOY,MAhBf,WACE,OACEtD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiD,SAAA,KACElD,EAAAC,EAAAC,cAAA,MAAIE,UAAU,sCACX,IADH,sBAEsB,KAEtBJ,EAAAC,EAAAC,cAAA,OAAKqD,MAAM,qBACTvD,EAAAC,EAAAC,cAAA,MAAIqD,MAAM,YAAV,aACAvD,EAAAC,EAAAC,cAAA,MAAIqD,MAAM,YAAV,eACAvD,EAAAC,EAAAC,cAAA,MAAIqD,MAAM,YAAV,YCTO,SAASC,IACtB,OACExD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiD,SAAA,KACElD,EAAAC,EAAAC,cAACuD,EAAD,MACAzD,EAAAC,EAAAC,cAACwD,EAAD,OCJN,MAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAAS9B,OACPhC,EAAAC,EAAAC,cAACF,EAAAC,EAAM8D,WAAP,KACE/D,EAAAC,EAAAC,cAACsD,EAAD,OAEFG","file":"static/js/main.02ad52a2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/* SpinButton is a component to randomize the\r\n   fields in the SpinnerMachine component. It expects\r\n   an event handler for its onClick event attribute in\r\n   the props */\r\nfunction SpinButton(props) {\r\n  return (\r\n    <button\r\n      id=\"spin-button\"\r\n      className=\"btn btn-info\"\r\n      onClick={props.clickHandler}\r\n    >\r\n      Spin the wheel!\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SpinButton;\r\n","import React from \"react\";\r\n\r\n/* Spinner represents an individual field within the spinner machine.\r\n   It expects the elements to be passed through the props, and has\r\n   its own functions to handle the changes to its styling as it\r\n   spins. */\r\nclass Spinner extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      topMargin: 0,\r\n      timeRemaining: 0,\r\n    };\r\n    this.spin = this.spin.bind(this);\r\n    this.move = this.move.bind(this);\r\n    this.tick = this.tick.bind(this);\r\n    this.initialize = this.initialize.bind(this);\r\n  }\r\n\r\n  /* spin is called by the parent component, SpinnerMachine, to make\r\n     the Spinner component spin. Triggering the spin via a ref to the \r\n     component in SpinnerMachine may have been a bad design decision, by\r\n     React standards. */\r\n  spin() {\r\n    this.initialize();\r\n\r\n    // wait for spinner to go to bottom, then top, then go to random element\r\n    setTimeout(() => {\r\n      this.timer = setInterval(() => this.tick(), 100);\r\n    }, 2000);\r\n  }\r\n\r\n  /* initialize resets the spinner by spinning to the bottom element, then\r\n     the top element, then the target random element */\r\n  initialize() {\r\n    // spin to bottom element\r\n    this.setState({ topMargin: -(this.props.elements.length - 1) * 100 });\r\n\r\n    // wait to get to bottom element, then spin to top element\r\n    setTimeout(() => {\r\n      this.setState({ topMargin: 0 });\r\n    }, 1000);\r\n\r\n    // calculate random element, clear timer\r\n    this.targetEl = Math.floor(Math.random() * this.props.elements.length);\r\n    clearInterval(this.timer);\r\n\r\n    /* timeRemaining is equal to the number of elements that the Spinner needs\r\n       to move times 100ms each */\r\n    this.setState({ timeRemaining: this.targetEl * 100 });\r\n  }\r\n\r\n  /* tick checks the timeRemaining in state to determine if movement\r\n     of the Spinner should continue or not */\r\n  tick() {\r\n    if (this.state.timeRemaining <= 0) {\r\n      clearInterval(this.timer);\r\n      return;\r\n    }\r\n    this.move();\r\n  }\r\n\r\n  /* move changes the topMargin of Spinner and decrements the timeRemaining */\r\n  move() {\r\n    this.setState((state) => {\r\n      return {\r\n        topMargin: state.topMargin - 100,\r\n        timeRemaining: state.timeRemaining - 100,\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let { topMargin } = this.state;\r\n\r\n    return (\r\n      <span\r\n        className=\"spinner-container\"\r\n        style={{\r\n          marginTop: topMargin + \"px\",\r\n        }}\r\n      >\r\n        {this.props.elements.map((el) => (\r\n          <div className=\"spinner-element\" key={el}>\r\n            {el}\r\n          </div>\r\n        ))}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport SpinButton from \"./SpinButton.js\";\r\nimport Spinner from \"./Spinner.js\";\r\nimport bootstrap from \"bootstrap\"; // eslint-disable-line no-unused-vars\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// add items to these arrays to change language\r\nlet mechanism = [\r\n  \"Tiered\",\r\n  \"Dynamic\",\r\n  \"Differential\",\r\n  \"Weighted\",\r\n  \"Location-Based\",\r\n];\r\nlet denomination = [\"Daily\", \"Weekly\", \"Biweekly\", \"Monthly\", \"Yearly\"];\r\nlet threshold = [\"Hours\", \"Shifts\", \"Steps\", \"Breaths\"];\r\n\r\n/* SpinnerMachine is the parent component of the Spinners, and triggers\r\n   them to spin when the user clicks the SpinButton */\r\nclass SpinnerMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.mSpinner = React.createRef();\r\n    this.dSpinner = React.createRef();\r\n    this.tSpinner = React.createRef();\r\n  }\r\n\r\n  // handleClick delegates the spinning logic to the Spinners\r\n  handleClick = (event) => {\r\n    event.preventDefault();\r\n    this.mSpinner.current.spin();\r\n    this.dSpinner.current.spin();\r\n    this.tSpinner.current.spin();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"spinner-machine\">\r\n          <Spinner elements={mechanism} ref={this.mSpinner} />\r\n          <Spinner elements={denomination} ref={this.dSpinner} />\r\n          <Spinner elements={threshold} ref={this.tSpinner} />\r\n        </div>\r\n        <SpinButton clickHandler={this.handleClick}>Spin the wheel!</SpinButton>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SpinnerMachine;\r\n","import React from \"react\";\r\n\r\n/* Heading is a component to display the name of the app\r\n   and the headers for the fields being randomized */\r\nfunction Heading() {\r\n  return (\r\n    <>\r\n      <h1 className=\"center-block jumbotron text-center\">\r\n        {\" \"}\r\n        Overtime Randomizer{\" \"}\r\n      </h1>\r\n      <div class=\"heading-container\">\r\n        <h3 class=\"col-lg-4\">Mechanism</h3>\r\n        <h3 class=\"col-lg-4\">Time Period</h3>\r\n        <h3 class=\"col-lg-4\">Basis</h3>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Heading;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport SpinnerMachine from \"./SpinnerMachine.js\";\r\nimport Heading from \"./Heading.js\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <Heading />\r\n      <SpinnerMachine />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}